<?xml version="1.0"?>
<project name="IKVM.Runtime" default="IKVM.Runtime">
    <include buildfile="../ikvm.include" />
    <target name="first-pass" depends="DummyLibrary">
        <property name="first-pass" value="true" />
        <call target="IKVM.Runtime" />
    </target>
    <target name="signed">
        <property name="signed" value="SIGNCODE" />
        <property name="signoption" value="-key:ikvm-key" />
        <property name="ilasm_signoption" value="/key:@ikvm-key" />
        <call target="IKVM.Runtime" />
    </target>

    <target name="DummyLibrary">
        <property name="defs" value="DUMMY" />
        <if test="${property::exists('signed')}">
            <property name="defs" value="${defs};${signed}" />
        </if>
        <csc noconfig="true" target="library" output="IKVM.OpenJDK.Core.dll" define="${defs}" unsafe="false" rebuild="true">
            <sources>
                <include name="../CommonAssemblyInfo.cs" />
                <include name="Dummy.OpenJDK.Core.cs" />
            </sources>
        </csc>
    </target>

    <target name="IKVM.Runtime.JNI">
        <loadfile file="../tools/pubkey.txt" property="publickey" />
        <copy file="JniAssemblyInfo.cs.in" tofile="JniAssemblyInfo.cs" overwrite="true">
            <filterchain>
                <replacetokens>
                    <token key="PUBLICKEY" value="${publickey}" />
                </replacetokens>
            </filterchain>
        </copy>
        <csc noconfig="true" target="library" output="IKVM.Runtime.JNI.dll" define="${defs}" optimize="true" unsafe="true" rebuild="true">
<!--
            <arg unless="${string::starts-with(framework::get-target-framework(), 'mono')}" value="/baseaddress:0x55300000" />
-->
            <sources>
                <include name="../CommonAssemblyInfo.cs" />
                <include name="JniAssemblyInfo.cs" />
                <include name="JniInterface.cs" />
            </sources>
            <references>
                <include name="../bin/IKVM.OpenJDK.Core.dll" asis="true" />
                <include name="../bin/IKVM.Runtime.dll" asis="true" />
		<include name="/Developer/MonoTouch/usr/lib/mono/2.1/monotouch.dll" asis="true"/>
                <include name="${framework::get-assembly-directory(framework::get-target-framework())}/System.dll" />
            </references>
        </csc>
        <copy file="IKVM.Runtime.JNI.dll" todir="../bin" />        
    </target>

    <target name="IKVM.Runtime">
        <property overwrite="false" name="first-pass" value="false" />
        <property name="defs" value="TRACE" />
        <if test="${property::exists('signed')}">
            <property name="defs" value="${defs};${signed}" />
        </if>
        <loadfile file="../tools/pubkey.txt" property="publickey" />
        <copy file="AssemblyInfo.cs.in" tofile="AssemblyInfo.cs" overwrite="true">
            <filterchain>
                <replacetokens>
                    <token key="PUBLICKEY" value="${publickey}" />
                </replacetokens>
            </filterchain>
        </copy>
        <if test="${version::get-major(framework::get-version(framework::get-target-framework() )) == 4}">
            <property name="defs" value="${defs};NET_4_0;CLASSGC" />
        </if>
        <if test="${first-pass}">
            <property name="defs" value="${defs};FIRST_PASS" />
        </if>
        <if test="${not first-pass}">
            <!-- on Mono the C# compiler doesn't give an error if the vfs.zip resource is missing, so we have to check it here -->
            <if test="${not file::exists('../openjdk/vfs.zip')}">
                <fail message="../openjdk/vfs.zip is missing. Make sure to build ikvm/openjdk first." />
            </if>
            <call target="IKVM.Runtime.JNI" />
        </if>
        <csc noconfig="true" target="library" output="IKVM.Runtime.dll" define="${defs}" optimize="true" unsafe="false" rebuild="true">
<!--
            <arg unless="${string::starts-with(framework::get-target-framework(), 'mono')}" value="/baseaddress:0x55000000" />
-->
            <sources>
                <include name="../CommonAssemblyInfo.cs" />
                <include name="AssemblyInfo.cs" />
                <include name="AssemblyClassLoader.cs" />
                <include name="atomic.cs" />
                <include name="attributes.cs" />
                <include name="BigEndianBinaryReader.cs" />
                <include name="ByteCode.cs" />
                <include name="ByteCodeHelper.cs" />
                <include name="ClassFile.cs" />
                <include name="ClassLoaderWrapper.cs" />
                <include name="CodeEmitter.cs" />
                <include name="common.cs" />
                <include name="compiler.cs" />
                <include name="CoreClasses.cs" />
                <include name="DotNetTypeWrapper.cs" />
                <include name="DynamicClassLoader.cs" />
                <include name="DynamicTypeWrapper.cs" />
                <include name="ExceptionHelper.cs" />
                <include name="intrinsics.cs" />
                <include name="JavaException.cs" />
                <include name="JsrInliner.cs" />
                <include name="LocalVars.cs" />
                <include name="MemberWrapper.cs" />
                <include name="openjdk.cs" />
                <include name="PassiveWeakDictionary.cs" />
                <include name="profiler.cs" />
                <include name="ReflectUtil.cs" />
                <include name="RuntimeHelperTypes.cs" />
                <include name="Serialization.cs" />
                <include name="tracer.cs" />
                <include name="Types.cs" />
                <include name="TypeWrapper.cs" />
                <include name="verifier.cs" />
                <include name="vfs.cs" />
                <include name="vm.cs" />
                <include name="fdlibm/e_hypot.cs" />
                <include name="fdlibm/e_pow.cs" />
                <include name="fdlibm/e_rem_pio2.cs" />
                <include name="fdlibm/fdlibm_h.cs" />
                <include name="fdlibm/k_rem_pio2.cs" />
                <include name="fdlibm/k_tan.cs" />
                <include name="fdlibm/s_cbrt.cs" />
                <include name="fdlibm/s_expm1.cs" />
                <include name="fdlibm/s_floor.cs" />
                <include name="fdlibm/s_log1p.cs" />
                <include name="fdlibm/s_scalbn.cs" />
                <include name="fdlibm/s_tan.cs" />
            </sources>
            <resources>
                <include if="${not first-pass}" name="../openjdk/vfs.zip" />
            </resources>
            <references>
                <include if="${first-pass}" name="IKVM.OpenJDK.Core.dll" asis="true" />
                <include if="${not first-pass}" name="../bin/IKVM.Runtime.JNI.dll" asis="true" />
                <include if="${not first-pass}" name="../bin/IKVM.OpenJDK.Core.dll" asis="true" />
                <include if="${not first-pass}" name="../bin/IKVM.OpenJDK.Util.dll" asis="true" />
                <include if="${not first-pass}" name="../bin/IKVM.OpenJDK.Misc.dll" asis="true" />
                <include name="${framework::get-assembly-directory(framework::get-target-framework())}/System.dll" />
                <include name="${framework::get-assembly-directory(framework::get-target-framework())}/System.Configuration.dll" />
            </references>
        </csc>
        <copy file="IKVM.Runtime.dll" todir="../bin" />
        <if test="${not first-pass}">
            <if test="${property::exists('peverify')}">
                <exec program="${peverify}" commandline="-nologo ../bin/IKVM.Runtime.dll" />
            </if>
        </if>
    </target>

    <target name="IKVM.NoEmitRuntime">
        <property name="defs" value="TRACE;NOEMIT" />
        <if test="${property::exists('signed')}">
            <property name="defs" value="${defs};${signed}" />
        </if>
        <loadfile file="../tools/pubkey.txt" property="publickey" />
        <copy file="AssemblyInfo.cs.in" tofile="AssemblyInfo.cs" overwrite="true">
            <filterchain>
                <replacetokens>
                    <token key="PUBLICKEY" value="${publickey}" />
                </replacetokens>
            </filterchain>
        </copy>
        <if test="${version::get-major(framework::get-version(framework::get-target-framework() )) == 4}">
            <property name="defs" value="${defs};NET_4_0;CLASSGC" />
        </if>
        <csc noconfig="true" target="library" output="IKVM.Runtime.dll" debug="true" define="${defs}" unsafe="false" rebuild="true">
            <sources>
<!--
                <include name="atomic.cs" />
                <include name="CodeEmitter.cs" />
                <include name="compiler.cs" />
                <include name="DynamicClassLoader.cs" />
                <include name="DynamicTypeWrapper.cs" />
                <include name="intrinsics.cs" />
                <include name="LocalVars.cs" />
                <include name="Serialization.cs" />
-->
                <include name="../CommonAssemblyInfo.cs" />
                <include name="AssemblyInfo.cs" />
                <include name="AssemblyClassLoader.cs" />
                <include name="attributes.cs" />
                <include name="BigEndianBinaryReader.cs" />
                <include name="ByteCode.cs" />
                <include name="ByteCodeHelper.cs" />
                <include name="ClassFile.cs" />
                <include name="ClassLoaderWrapper.cs" />
                <include name="common.cs" />
                <include name="CoreClasses.cs" />
                <include name="DotNetTypeWrapper.cs" />
                <include name="ExceptionHelper.cs" />
                <include name="JavaException.cs" />
                <include name="JsrInliner.cs" />
                <include name="MemberWrapper.cs" />
                <include name="openjdk.cs" />
                <include name="PassiveWeakDictionary.cs" />
                <include name="profiler.cs" />
                <include name="ReflectUtil.cs" />
                <include name="RuntimeHelperTypes.cs" />
                <include name="tracer.cs" />
                <include name="Types.cs" />
                <include name="TypeWrapper.cs" />
                <include name="verifier.cs" />
                <include name="vfs.cs" />
                <include name="vm.cs" />
                <include name="fdlibm/e_hypot.cs" />
                <include name="fdlibm/e_pow.cs" />
                <include name="fdlibm/e_rem_pio2.cs" />
                <include name="fdlibm/fdlibm_h.cs" />
                <include name="fdlibm/k_rem_pio2.cs" />
                <include name="fdlibm/k_tan.cs" />
                <include name="fdlibm/s_cbrt.cs" />
                <include name="fdlibm/s_expm1.cs" />
                <include name="fdlibm/s_floor.cs" />
                <include name="fdlibm/s_log1p.cs" />
                <include name="fdlibm/s_scalbn.cs" />
                <include name="fdlibm/s_tan.cs" />
            </sources>
            <resources>
                <include name="../openjdk/vfs.zip" />
            </resources>
            <references>
                <include name="../bin/IKVM.Runtime.JNI.dll" asis="true" />
                <include name="../bin/IKVM.OpenJDK.Core.dll" asis="true" />
                <include name="../bin/IKVM.OpenJDK.Util.dll" asis="true" />
                <include name="../bin/IKVM.OpenJDK.Misc.dll" asis="true" />
                <include name="${framework::get-assembly-directory(framework::get-target-framework())}/System.dll" />
                <include name="${framework::get-assembly-directory(framework::get-target-framework())}/System.Configuration.dll" />
            </references>
        </csc>
        <copy file="IKVM.Runtime.dll" todir="../bin" />
        <copy file="IKVM.Runtime.dll.mdb" todir="../bin" />
    </target>
</project>
